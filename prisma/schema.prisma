// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String       @id @default(auto()) @map("_id") @db.ObjectId
  externalId          String       @unique
  email               String       @unique
  plan                String?      @default("FREE")
  quotaLimit          Int?
  defaultCollectionId String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  memories            Memory[]
  places              Place[]
  people              Person[]
  events              Event[]
  attributes          Attribute[]
  reflections         Reflection[]
  collections         Collection[]
}

model Collection {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  collectionName    String
  collectionDetails String
  userEmail         String
  users             String[]
  createDate        DateTime
  updateDate        DateTime
  owner             User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           String   @db.ObjectId
}

model Memory {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  media_type    String
  media_url     String
  thumbnail_url String?
  media_name    String
  date          DateTime
  date_type     String         @default("exact")
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String         @db.ObjectId
  people        MemoryPerson[]
  places        MemoryPlace[]
  events        MemoryEvent[]
  reflections   Reflection[]
}

model Person {
  id             String            @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String?
  role           String?
  photo_url      String?
  phone_number   String?
  date_of_birth  String?
  place_of_birth String?
  marital_status String?
  spouse_id      String?
  childrenIds    String[]
  created_at     DateTime          @default(now())
  updated_at     DateTime          @updatedAt
  owner          User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String            @db.ObjectId
  attributes     PersonAttribute[]
  memories       MemoryPerson[]
}

model Place {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  address    String?
  city       String
  country    String
  type       String
  capacity   Int?
  rating     Float?
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  owner      User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String           @db.ObjectId
  attributes PlaceAttribute[]
  events     Event[]
  memories   MemoryPlace[]
}

model Event {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  date        DateTime
  type        String
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  owner       User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String           @db.ObjectId
  attributes  EventAttribute[]
  place       Place?           @relation(fields: [place_id], references: [id], onDelete: SetNull)
  place_id    String?          @db.ObjectId
  memories    MemoryEvent[]
}

model Attribute {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String?
  description String?
  entity_type String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     String   @db.ObjectId
}

model Reflection {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  memory     Memory   @relation(fields: [memory_id], references: [id], onDelete: Cascade)
  memory_id  String   @db.ObjectId
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId    String   @db.ObjectId
}

// Intermediary Models for Many-to-Many Relationships
model MemoryPerson {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  memory    Memory @relation(fields: [memory_id], references: [id], onDelete: Cascade)
  memory_id String @db.ObjectId
  person    Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  person_id String @db.ObjectId

  @@unique([memory_id, person_id])
}

model MemoryPlace {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  memory    Memory @relation(fields: [memory_id], references: [id], onDelete: Cascade)
  memory_id String @db.ObjectId
  place     Place  @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id  String @db.ObjectId

  @@unique([memory_id, place_id])
}

model MemoryEvent {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  memory    Memory @relation(fields: [memory_id], references: [id], onDelete: Cascade)
  memory_id String @db.ObjectId
  event     Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id  String @db.ObjectId

  @@unique([memory_id, event_id])
}

model PersonAttribute {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  person    Person @relation(fields: [person_id], references: [id], onDelete: Cascade)
  person_id String @db.ObjectId
  attribute String
  value     String

  @@unique([person_id, attribute])
}

model PlaceAttribute {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  place     Place  @relation(fields: [place_id], references: [id], onDelete: Cascade)
  place_id  String @db.ObjectId
  attribute String
  value     String

  @@unique([place_id, attribute])
}

model EventAttribute {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  event     Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)
  event_id  String @db.ObjectId
  attribute String
  value     String

  @@unique([event_id, attribute])
}
